How to use Simple Media Lib
===========================

Simple Media Lib is a simplistic library for maintaining a list of media files that any other add-on may use. It is called "Simple" because it does not itself provided much functionality beyond this basic requirement. Effectively it allows registering of a list of media files, retrieving a given media file by name, and some iterators to retrieve a list of media files by media type. Simple Media Lib does *not* provide default media files if a desired file is not present, that is left up to the add-on developer.

To make your add-on Simple Media Lib aware, you will first need to load LibStub into your add-on, then query LibStub for the library.

    local smlib = LibStub:GetLibrary("SimpleMediaLib", true);

Alternatively, if you do not wish to load LibStub into your add-on, you may look for the presence of LibStub first since Simple Media Lib loads and uses LibStub. Therefore, it is possible to do the following:

    local smlib = nil;
    
    if (LibStub) then
        smlib = LibStub:GetLibrary("SimpleMediaLib", true);
    end

In either case, if the return value is nil, then Simple Media Lib is not loaded. Otherwise, you will have a reference to the library.

Simple Media Lib maintains three lists of media based on their types. Specifically Fonts, Sounds, and Images. To get a list of media files, Simple Media Lib provides three iterators for your use depending on the media type you want. Here are exmaples of using each to display a list of all the names currently registered with Simple Media Lib.

    -- Iterate through all registered fonts
    for _, entry in smlib:Fonts() do
        DEFAULT_CHAT_FRAME:AddMessage("Font name: "..entry.name);
    end

    -- Iterate through all registered sounds
    for _, entry in smlib:Sounds() do
        DEFAULT_CHAT_FRAME:AddMessage("Sound name: "..entry.name);
    end

    -- Iterate through all registered images
    for _, entry in smlib:Images() do
        DEFAULT_CHAT_FRAME:AddMessage("Image name: "..entry.name);
    end

The entries returned by the above iterators are tables containing the following:

    For Fonts:
        entry.name      -- String containing name of the font.
        entry.category  -- String containing a category name. May be used to
                           further refine searches.
        entry.file      -- String containing path and file for this font.
        entry.scale     -- Optional scale value. May be used in order to try to 
                           keep the font visually the same size as others.
        
    For Sounds:
        entry.name      -- String containing name of the sound.
        entry.category  -- String containing a category name. May be used to 
                           further refine searches.
        entry.file      -- String containing path and file to the sound file.

    For Images:
        entry.name      -- String containing name of the image.
        entry.category  -- String containing a category name. May be used to
                           further refine searches.
        entry.file      -- String containing path and file to use for this image.
        entry.width     -- Width, in pixels, of the full image.
        entry.height    -- Height, in pixels, of the full image.
        entry.top       -- Value between 0 and 1 where the top edge of area to use
                           if defining a sub-area of an image. Typically 0.
        entry.bottom    -- Value between 0 and 1 where the bottom edge of area to
                           use if defining a sub-area of an image. Typically 1.
        entry.left      -- Value between 0 and 1 where the left edge of area to use
                           if defining a sub-area of an image. Typically 0.
        entry.right     -- Value between 0 and 1 where the right edge of area to
                           use if defining a sub-area of an image. Typically 1.
                       
To retrieve the info of a specific entry, you may use the GetMediaByName method. For example, to retrieve the information about the "GoodDog Cool" font, use:

    local entry = smlib:GetMediaByName("Font", "GoodDog Cool");
    
Note that the first parameter is the type of media you are looking for (valid values are "Font", "Sound", and "Image") and the second parameter is the name of the media. Simple Media Lib will perform a non-case sensitive match for names. If the media name is not found, GetMediaByName returns nil.

You can register your own media files with Simple Media Lib via the RegisterMediaList method. RegisterMediaList takes a table containing a list of media files to be registered and will attempt to register all of them with Simple Media Lib. Note that if a file already exists in the registered list by the same name and type, the file will not be re-registered, so care should be taken when naming the files to be registered (and rememember, Simple Media Lib treats these names as non-case sensitive).

An example of registering media files:

    local MediaList = {
        -- register a font
        { 
            type = "Font", category = "Default", "name = "AR HeiU30 Medium",
            file = "fonts/dfheimdu.ttf", scale = 1.0 
        },
            
        -- register an image
        { 
            type = "Image", category = "Bar", name = "Banto Bar", 
            file = "interface/common/bar/bantobar", width = 256, height = 32,
            top = 0, bottom = 1, left = 0, right = 1
        },
        
        -- register a sound
        {   
            type = "Sound", category = "Effect", name = "Add Rune", 
            file = "sound/interface/add_rune" 
        },
    }
    
    smlib:RegisterMediaList(MediaList);
    
For convenience, some of the entries within each media type may be omitted and a default value will be used instead. If the category name is not provided, then a category of "General" will be used instead. For images, the "top", "bottom", "left" and "right" entries may be left out and Simple Media Lib will assume these values to be 0,1,0,1 respectively (this then will encompass the entire image).

All paths to files are assumed to start from the Runes of Magic game folder.

